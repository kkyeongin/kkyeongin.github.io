{"componentChunkName":"component---src-templates-blog-post-js","path":"/Data-Structure/Trie 자료구조/","result":{"data":{"site":{"siteMetadata":{"title":"In Progress","author":"Kyeongin","siteUrl":"http://kkyeongin.github.io","comment":{"disqusShortName":"kkyeongin.github.io","utterances":"kkyeongin/kkyeongin.github.io"},"sponsor":{"buyMeACoffeeId":"QRsTu4dlJ"}}},"markdownRemark":{"id":"d1eaca0a-4fe0-5c35-a45e-89880b0c7225","excerpt":"Trie 자료구조 trie Goal Trie 자료 구조란 Trie 구현 Trie 자료 구조란 trie는 digital tree 또는 prefix tree 또는 retrieval tree라 불리며, search tree의 종류 중 하나이다. trie는 문자열을 키로 사용하는 동적 Set 또는 연관 배열을 저장하는 트리의 확장된 구조이다. 예로 위 그림과 같이 tea를 찾으려면 ‘t’를 먼저 찾고 그다음 ‘e’, ‘a’ 순서대로 찾으면 된다. Trie 구현(insert, search) root…","html":"<h2 id=\"trie-자료구조\"><a href=\"#trie-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" aria-label=\"trie 자료구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trie 자료구조</h2>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/1920px-Trie_example.svg.png\" alt=\"trie\"></p>\n<ul>\n<li>\n<p>Goal</p>\n<ul>\n<li>Trie 자료 구조란</li>\n<li>Trie 구현</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"trie-자료-구조란\"><a href=\"#trie-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EB%9E%80\" aria-label=\"trie 자료 구조란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trie 자료 구조란</h3>\n<p>trie는 digital tree 또는 prefix tree 또는 re<span style=\"color:blue\">trie</span>val tree라 불리며, search tree의 종류 중 하나이다.</p>\n<p>trie는 문자열을 키로 사용하는 동적 Set 또는 연관 배열을 저장하는 트리의 확장된 구조이다.</p>\n<p>예로 위 그림과 같이 tea를 찾으려면 ‘t’를 먼저 찾고 그다음 ‘e’, ‘a’ 순서대로 찾으면 된다.</p>\n<h3 id=\"trie-구현insert-search\"><a href=\"#trie-%EA%B5%AC%ED%98%84insert-search\" aria-label=\"trie 구현insert search permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trie 구현(insert, search)</h3>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">           root\n        /   \\    \\\n        t   a     b\n        |   |     |\n        h   p     y\n        |   |     |\n        e   p     e\n        |   |\n        i   l\n        |   |\n        r   e</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">global</span> ALPHABET_SIZE\n        self<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> ALPHABET_SIZE\n        self<span class=\"token punctuation\">.</span>isEndOfWord <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Initialize your data structure here.\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_getChar2Index</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Inserts a word into the trie.\n        \"\"\"</span>\n\n        pCrawl <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>root\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_getChar2Index<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># if current character is not present</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            pCrawl <span class=\"token operator\">=</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        pCrawl<span class=\"token punctuation\">.</span>isEndOfWord <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Returns if the word is in the trie.\n        \"\"\"</span>\n\n        pCrawl <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>root\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_getChar2Index<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            pCrawl <span class=\"token operator\">=</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> pCrawl <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> pCrawl<span class=\"token punctuation\">.</span>isEndOfWord\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"</span>\n        pCrawl <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>root\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> level <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_getChar2Index<span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n            pCrawl <span class=\"token operator\">=</span> pCrawl<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> pCrawl <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># if __name__ == '__main__':</span>\n    <span class=\"token comment\">#     obj = Trie()</span>\n    <span class=\"token comment\">#     word = \"apple\"</span>\n    <span class=\"token comment\">#     prefix = \"app\"</span>\n    <span class=\"token comment\">#     obj.insert(word)</span>\n    <span class=\"token comment\">#     print(\"insert : \"+word)</span>\n    <span class=\"token comment\">#     print(\"search : \"+ word + \", result = \"+str(obj.search(word)))</span>\n    <span class=\"token comment\">#     print(\"startsWith : \" + prefix + \", result = \"+str( obj.startsWith(prefix)))</span>\n    <span class=\"token comment\">#     print(\"startsWith : \" + \"the\" + \", result = \" + str(obj.startsWith(\"the\")))</span></code></pre></div>\n<p>root가 처음 가지고 있는 children의 개수는 (ALPHABET_SIZE)이며 <code class=\"language-text\">key(&#39;a&#39;) 경우 index 값은 0이다</code></p>\n<p>그 <code class=\"language-text\">다음 key(&#39;p&#39;) node는 &#39;a&#39; node children(index : &#39;p&#39;-&#39;a&#39;)</code>이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">insert : apple\nsearch : apple, result = True\nstartsWith : app, result = True\nstartsWith : the, result = False</code></pre></div>\n<h3 id=\"참고\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)- test code</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/trie-insert-and-search/\">GreekforGreek-Trie</a></li>\n</ul>","frontmatter":{"title":"Trie 자료구조","date":"March 13, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Data-Structure/Trie 자료구조/","previous":{"fields":{"slug":"/SICP/Data-Abstraction/"},"frontmatter":{"title":"Data Abstraction","category":"SCIP"}},"next":{"fields":{"slug":"/Hi-Blog/quick_start/"},"frontmatter":{"title":"Quick Start","category":"Hi-Blog"}}}}}