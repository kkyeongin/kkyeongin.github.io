{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin/basic-kotlin/","result":{"data":{"site":{"siteMetadata":{"title":"In Progress","author":"Kyeongin","siteUrl":"http://kkyeongin.github.io","comment":{"disqusShortName":"kkyeongin.github.io","utterances":"kkyeongin/kkyeongin.github.io"},"sponsor":{"buyMeACoffeeId":"QRsTu4dlJ"}}},"markdownRemark":{"id":"77894173-f373-5afb-a8b7-3e58679f104f","excerpt":"Statement(문)과 Expression(식)의 구분 프로그래밍 언어론에서의 statement 와 expression은 다르다.\n누군가 잘 신경쓰지 않을 수 있지만.. 이쪽 관련일을 했던 나로서는 꽤 신선했다. 중요한건 코틀린에선 조건문이아니라 조건식이라는 것이다.\n그리고 다른 언어(Java, C++)에서 문이 었던 것들이 코틀린에서는 식으로 나타낸다. (loop문 제외) 변수 코틀린은 자바스크립트랑 비슷하게 생기긴 했지만, 정적(static) 타입 언어다.\ntype…","html":"<h2 id=\"statement문과-expression식의-구분\"><a href=\"#statement%EB%AC%B8%EA%B3%BC-expression%EC%8B%9D%EC%9D%98-%EA%B5%AC%EB%B6%84\" aria-label=\"statement문과 expression식의 구분 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Statement(문)과 Expression(식)의 구분</h2>\n<p>프로그래밍 언어론에서의 statement 와 expression은 다르다.\n누군가 잘 신경쓰지 않을 수 있지만.. 이쪽 관련일을 했던 나로서는 꽤 신선했다.</p>\n<p>중요한건 코틀린에선 조건문이아니라 조건식이라는 것이다.\n그리고 다른 언어(Java, C++)에서 문이 었던 것들이 코틀린에서는 식으로 나타낸다. (loop문 제외)</p>\n<h2 id=\"변수\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>코틀린은 자바스크립트랑 비슷하게 생기긴 했지만, 정적(static) 타입 언어다.\ntype을 쓸때도 있고 안쓸때도 있지만, 컴파일 타임에서 type inference가 일어난다.\n추론이 가능하지 않을 때는 컴파일 에러를 일으킨다.</p>\n<p>예를 들어.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> vr <span class=\"token operator\">=</span> <span class=\"token string\">\"var is variable, mutable\"</span>\nval vl <span class=\"token operator\">=</span> <span class=\"token string\">\"val is value, immutable\"</span>\n\n<span class=\"token keyword\">var</span> compileError \n\ncompileError <span class=\"token operator\">=</span> <span class=\"token string\">\"need type (var compileError:String)\"</span></code></pre></div>\n<h2 id=\"클래스--프로퍼티\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4--%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"클래스  프로퍼티 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 &#x26; 프로퍼티</h2>\n<p>코틀린은 java를 100%지원하는 언어이다?\n그래서 java &#x3C;-> kotlin은 변환이 가능하다.</p>\n<p>클래스에서 문법적으로 다른점이 있고 꾀나 재미있다.</p>\n<p>몇가지를 소개 하자면.</p>\n<ol>\n<li>코틀린 클래스의 visibility modifier는 기본 public 이다.</li>\n<li>\n<p>프로퍼티 </p>\n<ul>\n<li>val - read only </li>\n<li>var - read , write ok</li>\n<li>클래스의 프로퍼티 이름을 사용하면 getter, setter가 자동으로 호출해 준다. </li>\n<li>커스텀 접근자 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomClass</span><span class=\"token punctuation\">(</span>val v1<span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">,</span> val v2<span class=\"token punctuation\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        val isEqual<span class=\"token punctuation\">:</span>Boolean\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v1 <span class=\"token operator\">==</span> v2\n            <span class=\"token comment\">/*\n            //or\n            get(){\n                return v1 == v2\n            }\n            */</span>       \n    <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>directory &#x26; package</p>\n<ol>\n<li>package, import java와 같이 사용가능하다. </li>\n<li>\n<p>클래스 import 뿐만 아니라 함수 import도 가능하다. </p>\n<ul>\n<li>import {directory}.{packageName}.{functionName}</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>","frontmatter":{"title":"basic kotlin 1","date":"December 09, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/kotlin/basic-kotlin/","previous":null,"next":{"fields":{"slug":"/Hi-Blog/hello/"},"frontmatter":{"title":"Welcome Bee starter","category":"Hi-Blog"}}}}}